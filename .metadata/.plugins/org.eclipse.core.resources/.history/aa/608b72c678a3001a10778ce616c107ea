package design_patterns;

import java.util.ArrayList;
import java.util.List;

/**
 * Observer is a behavioral design pattern that lets you define a subscription mechanism to notify
 *  multiple objects about any events that happen to the object they’re observing.
 * */
/**
 * Explanation :  
 * 1. Use Example of Celebrity and Followers and Assistant( UserManager ) 
 * 2. Every time celebrity post message , this messages send to every follower of the corresponding follower
 * 3. Assistant can add the follower to this list of followers for the respective celebrity
 * */

//The concrete publisher contains real business logic that's
//interesting for some subscribers. We could derive this class
//from the base publisher, but that isn't always possible in
//real life because the concrete publisher might already be a
//subclass. In this case, you can patch the subscription logic
//in with composition, as we did here.

class Celebrity {
	private UserManager userManager;
	private String celebName;
	
	public Celebrity(String celebName,UserManager userManager) {
		this.celebName = celebName;
		this.userManager = userManager;
	}
	
	// Methods of business logic can notify subscribers about
    // changes.
	public void sharePost(String message) {
		userManager.notify(celebName +" shared the message :: " + message +" for this post !!!");
	}
}

//The base publisher class includes subscription management
//code and notification methods.
class UserManager {
	
	private List<Followers> followers ;
	
	public UserManager() {
		followers = new ArrayList<Followers>();
	}
	
	public void addFollowers(Followers follower) {
		// checks of followers already exists
		if(followers.indexOf(follower)==-1) {
			followers.add(follower);
		}
	}
	
	public void removeFollowers(Followers follower) {
		// checks of followers already exists
		if(followers.indexOf(follower)!=-1) {
			followers.remove(follower);
		}
	}
	
	public void notify(String msg) {
		for(Followers follower : followers) {
			follower.sharedPost(msg);
		}
	}
}

//Here's the subscriber interface. If your programming language
//supports functional types, you can replace the whole
//subscriber hierarchy with a set of functions.
interface Followers {
	public void sharedPost(String msg);
}

//Concrete subscribers react to updates issued by the publisher
//they are attached to.
class NationalFans implements Followers{

	private Integer userId;
	
	@Override
	public void sharedPost(String msg) {
		System.out.println("NationalFans get message : " + msg);
	}
	
	public boolean equals() {
		return true;
	}
	// to compare custom class Java uses first equals then hashCode of the object , if we implement same hashCode value each time 
	// it returns same compare foe each object 
//	@Override
//	public int hashCode() {
//		final int prime = 31;
//		int result = 1;
//		//result = prime * result + ((userId == null) ? 0 : userId.hashCode());
//		// if we comment this it returns same for all 
//		return result;
//	}

	

}

class InternationFans implements Followers{

	private Integer userId;
	
	@Override
	public void sharedPost(String msg) {
		System.out.println("InterNationalFans get message : " + msg);
	}

	
}

// An application can configure publishers and subscribers at
//runtime.

public class ObserverDesignPattern {
	
	
	public static void main(String[] args) {
		
		// subscription manager contains notify , addSubscription , removeSubscription methods 
		UserManager userManager = new UserManager();
		
		//client that need to send notification to all the subscription , contains reference of subscription manager
		Celebrity celeb = new Celebrity("Sachin",userManager);
		
		
		// create Observers
		NationalFans fan1 = new NationalFans();
		NationalFans fan2 = new NationalFans();
		NationalFans fan3 = new NationalFans();
		InternationFans fan4 = new InternationFans();
		
		// subscribe Observers to the manager
		userManager.addFollowers(fan1);
		userManager.addFollowers(fan2);
		userManager.addFollowers(fan3);
		userManager.addFollowers(fan4);
		
		celeb.sharePost("`I played this match on very tough pressure`");
	}
}
